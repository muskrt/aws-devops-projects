- name: install docker and config 
  gather_facts: false 
  hosts: _development_1 
  become: true 
  vars: 
    aws_region: us-east-1 
    ecr_registry: account_id.dkr.ecr.us-east-1.amazonaws.com

  tasks:
    - name: update all packages 
      yum: 
        name: "*"
        state: latest 
    - name: UNINSTALL DOCKER OLD VERSIONS 
      yum: 
        name: "{{ item }}"
        state: removed  
      with_items: 
        - docker 
        - docker-client 
        - docker-client-latest 
        - docker-common 
        - docker-latest 
        - docker-latest-logrotate 
        - docker-logrotate 
        - docker-engine
    - name: install yum utils 
      yum: 
        name: "{{ item }}"
        state: latest 
      with_items:
        - yum-utils 
        - device-mapper-persistent-data 
        - lvm2 
        - unzip 

    - name: add docker repo 
      get_url: 
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo

    - name: INSTALL DOCKER 
      yum: 
        name: "{{ item }}"
        state: latest 
      loop: 
        - docker-ce 

    - name: install pip 
      package: 
        name: python3-pip 
        state: present
        update_cache: true 

    - name: install docker sdk 
      pip: 
        name: docker 

    - name: add ec2-user to docker group 
      user: 
        name: ec2-user 
        groups: docker 
        append: yes 

    - name: start deocker service 
      service: 
        name: docker 
        state: started 
        enabled: true 

    - name: install aws clie 
      get_url: 
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /home/ec2-user/awscliv2.zip
    - name: unzip file 
      unarchive:
        src: /home/ec2-user/awscliv2.zip 
        dest: /home/ec2-user 
        remote_src: true 
    - name: run awscli 
      shell: ./aws/install 

    - name: log in to aws ec2-user 
      shell: |
        export PATH=/usr/local/bin:$PATH 
        source ~/.bash_profile 
        aws ecr get-login-password --region {{ aws_regioin }} | docker login --username AWS --password-stdin {{ ecr_registry }}


- name: postgre database config 
  hosts: _ansible_postgresql 
  become: true 
  vars: 
    postgre_container: /home/ec2-user/postgresql 
    container_name: mustafa_postgre 
    image_name: accountid.dkr.ecr.us-east-1.amazonaws.com/todo-app-repo/todo-app:postgre 

  tasks:
    - name: REMOVE CONTAINER IF EXISTS 
      shell: "docker ps -q --filter 'name={{ container_name }}' && docker stop {{ container_name }} && docker rm -fv {{ container_name }} && docker image rm -f {{ container_name }} || echo 'not found'"
    - name: launch postgre docker container 
      docker_container: 
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started 
        ports: 
          - "5432:5432"
        env:
          POSTGRES_PASSWORD: "Pp123456789"
        volumes:
          - /db-data:/var/lib/postgresql/data 


- name: nodejs   config 
  hosts: _ansible_nodejs 
  become: true 
  vars: 
    postgre_container: /home/ec2-user/nodejs  
    container_name: mustafa_nodejs 
    image_name: accountid.dkr.ecr.us-east-1.amazonaws.com/todo-app-repo/todo-app:nodejs  

  tasks:
    - name: REMOVE CONTAINER IF EXISTS 
      shell: "docker ps -q --filter 'name={{ container_name }}' && docker stop {{ container_name }} && docker rm -fv {{ container_name }} && docker image rm -f {{ container_name }} || echo 'not found'"
    - name: launch postgre docker container 
      docker_container: 
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started 
        ports: 
          - "5000:5000"


- name: react  config 
  hosts: _ansible_react
  become: true 
  vars: 
    postgre_container: /home/ec2-user/react 
    container_name: mustafa_react
    image_name: accountid.dkr.ecr.us-east-1.amazonaws.com/todo-app-repo/todo-app:react

  tasks:
    - name: REMOVE CONTAINER IF EXISTS 
      shell: "docker ps -q --filter 'name={{ container_name }}' && docker stop {{ container_name }} && docker rm -fv {{ container_name }} && docker image rm -f {{ container_name }} || echo 'not found'"
    - name: launch postgre docker container 
      docker_container: 
        name: "{{ container_name }}"
        image: "{{ image_name }}"
        state: started 
        ports: 
          - "3000:3000"