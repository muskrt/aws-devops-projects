pipeline{
    agent any
    tools{
        terraform 'terraform'
        
        
    }
    

    environment{
        // TOOL=tool name: 'tfapt', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
        PATH=sh(script:"echo $PATH:/usr/local/bin",returnStdout:true).trim()
        AWS_REGION="us-east-1"
        AWS_ACCOUNT_ID=sh(script:'export PATH="$PATH:/usr/local/bin"&& aws sts get-caller-identity --query Account --output text',returnStdout:true).trim()
        ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        APP_REPO_NAME="todo-app-repo/todo-app"
        APP_NAME="todo"


    }


    stages{
        stage('clear worksapce'){
            steps{
                sh 'rm -rf *'
            }
        }
        stage ('GET APPLICATION FOLDER')
        {
            steps{
                echo "creating applicatoin folder"
                sh 'svn export https://github.com/muskrt/aws-devops-projects.git/trunk/Devops/#####PROJECTS#####/JENKINS/app'
                sh 'mv app/* .'
                sh 'rm -rf app '
            }
        }  
        stage('create Infrastructure for the App')
        {
            steps{
                echo "CREATING INFRASTRUCTURE FOR THE APP ON AWS CLOUD"
                sh 'terraform init'
                sh 'terraform apply --auto-approve'
            }
        }
        stage('create ecr repo'){
            steps{
                echo "create ecr repo"
                sh """
                aws ecr create-repository\
                  --repository-name ${APP_REPO_NAME}\
                  --image-scanning-configuration scanOnPush=false\
                  --image-tag-mutability MUTABLE\
                  --region ${AWS_REGION}
                """
            }

        }
        stage("build app docker iamge"){
            steps{
            echo "building app image "
            script{
                env.NODE_IP = sh(script: 'terraform output -raw node_public_ip',returnStdout:true).trim()
                env.DB_HOST = sh(script: 'terraform output -raw postgre_private_ip',returnStdout:true).trim()

            }
            sh 'echo ${DB_HOST}'
            sh 'echo ${NODE_IP}'
            sh 'envsubst <node-env-template > ./nodejs/server/.env'
            sh'cat ./nodejs/server/.env'
            sh 'envsubst <react-env-template > ./react/client/.env'
            sh'cat ./react/client/.env'
            sh 'docker build --force-rm -t "$ECR_REGISTRY/$APP_REPO_NAME:postgre" -f ./postgre/dockerfile_postgresql'
            sh 'docker build --force-rm -t "$ECR_REGISTRY/$APP_REPO_NAME:postgre" -f ./postgre/dockerfile_nodejs'
            sh 'docker build --force-rm -t "$ECR_REGISTRY/$APP_REPO_NAME:postgre" -f ./postgre/dockerfile_react'
            }

        }

        stage('push image to ecr'){
            steps{
                echo 'pushing image to ecr'
                sh 'aws ecer get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin "$ECR_REGISTRY"'
                sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:postgre" '
                sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:nodejs" '
                sh 'docker push "$ECR_REGISTRY/$APP_REPO_NAME:react" '
            }
        }

        stage('wait the instance'){
            steps{
                script{
                    echo "waiting for the instance"
                    id = sh(script:'aws ec2 describe-instances --filters Name=tag-value,Values=ansible_postgresql Name=instance-state-name,Values=running --query Reservations[*].Instances[*].[InstanceId] --output text',returnStdout:true).trim()
                    sh 'aws ec2 wait instance-status-ok --instance-ids $id'
                }
            }
        }
        stage('deploy the app'){
            steps{
                echo "deploy the app"
                sh 'ls -l'
                sh 'ansible --version'
                sh 'ansible-inventory --graph'
                ansiblePlaybook credentialsId: 'linux', disableHostKeyChecking: true, installation:' ansible',inventory:'inventory_aws_ec2.yml', playbook:'docker_project.yml'

            }
        }
        stage('destroy the infrastructure'){
            steps{
                timeout(time:5, unit:'DAYS'){
                    input message: 'Approve terminate'
                }
                sh """
                docker image prune -af
                terraform destroy --auto-approve
                aws ecr delete-repository \
                    --repository-name ${APP_REPO_NAME} \
                    --region ${AWS_REGION} \
                    --force 
                """
            }
        }
        }
    

    }

    post{
        always{
            echo 'deleting all local images '
            sh 'docker image prune -af'

        }
        failure{
            echo 'Delete the image repo on ecr due to failure'
            sh """
            aws ecr delete-repository \
                --repository-name ${APP_REPO_NAME} \
                --region ${AWS_REGION} \
                --force 
            """
            echo "Deleting Terraform Stack due to the failure"
            sh 'terraform destroy --auto-approve'
        
    }





}