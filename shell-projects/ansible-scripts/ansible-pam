#!/usr/bin/python3
import os 
import sys
import subprocess
import json

global build_id
build_id=0
global group_names
group_names={}
global groups
groups={}
global user_names
user_names={}

stackdata_path="/home/mustafa/.ansibleInventory/"

def add_stack_data():

   
    path=os.path.join(stackdata_path,'group_names.txt')
    with open(path,'w') as file:
            file.write(str(group_names))
            file.close()
    os.path.join(stackdata_path,'groups.txt')
    with open(stackdata_path+'groups.txt','w') as file:
            file.write(str(groups))
            file.close()
    os.path.join(stackdata_path,'user_names.txt')
    with open(stackdata_path+'user_names.txt','w') as file:
            file.write(str(user_names))
            file.close()

def read_stack_data():
    global group_names
    group_names={}
    global groups
    groups={}
    global user_names
    user_names={}
    try:
        with open(stackdata_path+'group_names.txt','r') as file:
                data=file.read()
                data=data.replace('\'','"')
                group_names=json.loads(data)
                file.close()
        with open(stackdata_path+'groups.txt','r') as file:
                data=file.read()
                data=data.replace('\'','"')
                groups=json.loads(data)
                file.close()
        with open(stackdata_path+'user_names.txt','r') as file:
                data=file.read()
                data=data.replace('\'','"')
                user_names=json.loads(data)
                file.close()
    except:
        print("file not found ..")




def create_cfg(path='./'):
    os.path.join(path,'ansible.cfg')
    with open('ansible.cfg','w') as file:
        file.write("""
        [defaults]
        host_key_checking = False
        inventory = inventory.txt
        deprecation_warnings=False
        interpreter_python=auto_silent
        private_key_file =/home/mustafa/linux.pem
        """)
        file.close()


def create_stack_data(data,path="./",userName='test'):

    read_stack_data()
    print(group_names,user_names,groups)
    content=data
    group_name=content.split(' ')[0]
    if len(group_name)>1:
        group_names[group_name]=group_name
        if group_name in groups.keys():
            pass
        else:
            groups[group_name]=[]
    print(group_names)
    for i in group_names:
        # user_name=input(f"Enter user name for {i} group:")
        user_names[i]=userName
    
    
    if len(group_name)>1:
        if group_name in group_names:
            # groups[group_name].append(i)
            
            content=content.split(' ')
            content=(content[0]+' ansible_host='+content[1]+f' ansible_user=test')
            groups[group_name].append(content)
    print(groups)
    add_stack_data()
    create_cfg(path)

    os.path.join(path,'inventory.txt')
    with open(path+'inventory.txt','w') as file:
        for key in groups:
            file.write('['+key+']\n')
            for value in groups[key]:
                file.write(value+'\n')
        file.close()

    

def check_inventory(path):
    files=os.listdir(path)
    created_new=1
    timestamp = str(subprocess.check_output(f"""
                echo `stat '{path}'/inventory.txt | grep Birth`
            """, shell=True).decode())
    cr_time=datetime.now()

    timestamp = (timestamp.split(' ')[1] +' '+ timestamp.split(' ')[2])
    timestamp = parser.parse(timestamp)
    print(str((cr_time-timestamp)))
    exit()

    if 'inventory.txt' in files:
        with open('inventory.txt','r') as file:
            content=file.read()
            flag=content.split('\n')[0].split('=')[1]
            created_new=int(flag)
            file.close()
        if created_new==0:
            os.system('rm inventory.txt')




if __name__=="__main__":
    if sys.argv[1]=="--check":
        check_inventory(sys.argv[2])
        
        

    elif sys.argv[1]=="--dyninv":
        if len(sys.argv)==6:
            data=str(sys.argv[2]+' '+sys.argv[3])
            create_stack_data(data,sys.argv[4],sys.argv[5])
        else:
            data=str(sys.argv[2]+' '+sys.argv[3])
            create_stack_data(data)

